import { GoogleGenAI } from '@google/genai';
import type { VercelRequest, VercelResponse } from '@vercel/node';
import { SALES_ANALYSIS_PROMPT } from '../prompts/salesPrompt';

// üé® –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: "\x1b[0m",
  gray: "\x1b[90m",
  red: "\x1b[31m",
  green: "\x1b[32m",
  yellow: "\x1b[33m",
  blue: "\x1b[34m",
  magenta: "\x1b[35m",
  cyan: "\x1b[36m",
  bold: "\x1b[1m"
};

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π API ---
const getApiKeys = (): string[] => {
  const keys: string[] = [];
  if (process.env.API_KEY) keys.push(process.env.API_KEY);
  let i = 2;
  while (process.env[`API_KEY_${i}`]) {
    keys.push(process.env[`API_KEY_${i}`]!);
    i++;
  }
  return keys;
};

// --- –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ (–§–∏—à–µ—Ä-–ô–µ–π—Ç—Å) ---
const shuffleArray = <T>(array: T[]): T[] => {
  const arr = [...array];
  for (let i = arr.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [arr[i], arr[j]] = [arr[j], arr[i]];
  }
  return arr;
};

export default async function handler(req: VercelRequest, res: VercelResponse) {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    return res.status(204).end();
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: '–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω' });
  }

  const { csvData } = req.body;
  if (!csvData || typeof csvData !== 'string') {
    return res.status(400).json({ error: '–ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ CSV –≤ –ø–æ–ª–µ "csvData"' });
  }

  const apiKeys = shuffleArray(getApiKeys());
  if (apiKeys.length === 0) {
    return res.status(500).json({ error: '–ö–ª—é—á–∏ API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã' });
  }

  console.log(`${colors.cyan}${colors.bold}üìà –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂. –ù–∞–π–¥–µ–Ω–æ ${apiKeys.length} –∫–ª—é—á(–µ–π).${colors.reset}`);
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —É—Å–∫–æ—Ä–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
  const csvLines = csvData.split('\n');
  const csvHeader = csvLines[0];
  const csvBody = csvLines.slice(1, 301).join('\n'); // –ó–∞–≥–æ–ª–æ–≤–æ–∫ + 300 —Å—Ç—Ä–æ–∫
  const truncatedCsvData = `${csvHeader}\n${csvBody}`;

  const fullPrompt = `${SALES_ANALYSIS_PROMPT}\n\n–í–æ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n---\n${truncatedCsvData}`;
  
  let lastError: any = null;
  for (const apiKey of apiKeys) {
      const shortKey = apiKey.slice(-6);
      try {
        const ai = new GoogleGenAI({ 
            apiKey
        });
        
        const response = await ai.models.generateContent({
          model: 'gemini-2.5-pro',
          contents: fullPrompt,
          config: {
            responseMimeType: 'application/json',
          }
        });

        // FIX: Per @google/genai guidelines, response.text is a non-nullable getter.
        const text = response.text.trim();
        if (!text) throw new Error('–ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç');

        try {
            const json = JSON.parse(text);
            console.log(`${colors.green}‚úÖ –ö–ª—é—á ...${shortKey} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂.${colors.reset}`);
            return res.status(200).json(json);
        } catch (e) {
            console.error(`${colors.red}‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç Gemini –ø—Ä–∏ –∫–ª—é—á–µ ...${shortKey}:${colors.reset}`, text);
            lastError = new Error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏');
            // Don't continue here, the model responded but the format is wrong. Retrying with another key won't help.
            break; 
        }

      } catch (err: any) {
        lastError = err;
        const msg = (err.message || '').toLowerCase();
        
        if (msg.includes('429') || msg.includes('quota') || msg.includes('too many requests')) {
            console.warn(`${colors.yellow}‚õî –ö–ª—é—á ...${shortKey} –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç (–æ—à–∏–±–∫–∞ –∫–≤–æ—Ç—ã). –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å.${colors.reset}`);
            continue;
        }

        if (msg.includes('failed to fetch')) {
            console.warn(`${colors.yellow}üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ —Å –∫–ª—é—á–æ–º ...${shortKey}. –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å.${colors.reset}`);
            continue;
        }

        console.error(`${colors.red}‚ùå –ù–µ–ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª—é—á–µ ...${shortKey}:${colors.reset} ${err.message}`);
        break;
      }
  }

  console.error(`${colors.red}${colors.bold}üí• –í—Å–µ –∫–ª—é—á–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞:${colors.reset}`, lastError?.message);
  return res.status(500).json({
    error: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å AI-–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂',
    details: lastError?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.',
  });
}