import type { VercelRequest, VercelResponse } from '@vercel/node';
import { GoogleGenAI } from '@google/genai';
import { nanoid } from 'nanoid';

// üé® –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: "\x1b[0m", gray: "\x1b[90m", red: "\x1b[31m", 
  green: "\x1b[32m", yellow: "\x1b[33m", blue: "\x1b[34m",
  magenta: "\x1b[35m", cyan: "\x1b[36m", bold: "\x1b[1m"
};

interface Task {
  id: string;
  prompt: string;
  status: 'pending' | 'done' | 'error';
  result?: string;
  error?: string;
  createdAt: number;
}

// -----------------------------------------------------------------------------
// –í–ù–ò–ú–ê–ù–ò–ï: –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á –≤ –ø–∞–º—è—Ç–∏.
// –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏. –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–¥–∞—á–∏ –±—É–¥—É—Ç —Ç–µ—Ä—è—Ç—å—Å—è
// –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ serverless-—Ñ—É–Ω–∫—Ü–∏–∏. –î–ª—è –Ω–∞—Å—Ç–æ—è—â–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ
// Vercel KV, Redis, Firestore –∏–ª–∏ –¥—Ä—É–≥—É—é –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
// -----------------------------------------------------------------------------
const tasks = new Map<string, Task>();

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π API (—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ gemini-proxy.ts) ---
const getApiKeys = (): string[] => {
  const keys: string[] = [];
  if (process.env.API_KEY) keys.push(process.env.API_KEY);
  let i = 2;
  while (process.env[`API_KEY_${i}`]) {
    keys.push(process.env[`API_KEY_${i}`]!);
    i++;
  }
  return keys;
};

const shuffleArray = <T>(array: T[]): T[] => {
  const arr = [...array];
  for (let i = arr.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [arr[i], arr[j]] = [arr[j], arr[i]];
  }
  return arr;
};

// --- –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ ---
async function processTask(taskId: string) {
    const task = tasks.get(taskId);
    if (!task) return;

    const apiKeys = shuffleArray(getApiKeys());
    if (apiKeys.length === 0) {
        tasks.set(taskId, { ...task, status: 'error', error: '–ö–ª—é—á–∏ API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ' });
        return;
    }

    let lastError: any = null;

    for (const apiKey of apiKeys) {
        try {
            const ai = new GoogleGenAI({ apiKey });
            const response = await ai.models.generateContent({
                model: 'gemini-2.5-flash',
                contents: task.prompt,
            });

            const text = response.text?.trim();
            if (!text) throw new Error('–ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç');

            tasks.set(taskId, { ...task, status: 'done', result: text });
            return; // –£—Å–ø–µ—à–Ω–æ, –≤—ã—Ö–æ–¥–∏–º

        } catch (err: any) {
            lastError = err;
            const msg = (err.message || '').toLowerCase();
            if (msg.includes('429') || msg.includes('quota') || msg.includes('too many requests')) {
                // –ï—Å–ª–∏ –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á
                continue;
            }
            // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
            break; 
        }
    }

    // –ï—Å–ª–∏ –≤—Å–µ –∫–ª—é—á–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
    const errorMessage = lastError?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini API.';
    tasks.set(taskId, { ...task, status: 'error', error: errorMessage });
}

// --- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ API ---
export default async function handler(req: VercelRequest, res: VercelResponse) {
  // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

  if (req.method === 'OPTIONS') {
    return res.status(204).end();
  }

  // POST /api/gemini-task -> –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
  if (req.method === 'POST') {
    const { prompt } = req.body;
    if (!prompt) {
      return res.status(400).json({ error: '–í —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ "prompt"' });
    }

    const taskId = nanoid(10);
    const newTask: Task = {
      id: taskId,
      prompt,
      status: 'pending',
      createdAt: Date.now(),
    };
    tasks.set(taskId, newTask);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    processTask(taskId);

    console.log(`${colors.cyan}‚ú® –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞:${colors.reset} ${taskId}`);
    return res.status(202).json({ taskId }); // 202 Accepted
  }

  // GET /api/gemini-task?taskId=... -> –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
  if (req.method === 'GET') {
    const { taskId } = req.query;

    if (!taskId || typeof taskId !== 'string') {
      return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä "taskId"' });
    }

    const task = tasks.get(taskId);

    if (!task) {
      return res.status(404).json({ error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–µ —Å–∞–º –ø—Ä–æ–º–ø—Ç
    const { prompt: _, ...publicTaskData } = task;
    return res.status(200).json(publicTaskData);
  }

  return res.status(405).json({ error: '–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω' });
}

// –ü—Ä–æ—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏
setInterval(() => {
    const now = Date.now();
    const tenMinutes = 10 * 60 * 1000;
    for (const [key, task] of tasks.entries()) {
        if (now - task.createdAt > tenMinutes) {
            tasks.delete(key);
            console.log(`${colors.gray}üóëÔ∏è –û—á–∏—â–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∑–∞–¥–∞—á–∞:${colors.reset} ${key}`);
        }
    }
}, 60 * 1000);
