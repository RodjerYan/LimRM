import type { VercelRequest, VercelResponse } from '@vercel/node';
import { GoogleGenAI } from '@google/genai';
import { nanoid } from 'nanoid';

// üé® –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: "\x1b[0m", gray: "\x1b[90m", red: "\x1b[31m", 
  green: "\x1b[32m", yellow: "\x1b[33m", blue: "\x1b[34m",
  magenta: "\x1b[35m", cyan: "\x1b[36m", bold: "\x1b[1m"
};

// --- –¢–∏–ø—ã –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á ---
interface AiTask {
    id: string;
    status: 'pending' | 'done' | 'error';
    resultText: string;
    error?: string;
    createdAt: number;
}
const tasks = new Map<string, AiTask>();

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π API ---
const getApiKeys = (): string[] => {
  const keys: string[] = [];
  if (process.env.API_KEY) keys.push(process.env.API_KEY);
  let i = 2;
  while (process.env[`API_KEY_${i}`]) {
    keys.push(process.env[`API_KEY_${i}`]!);
    i++;
  }
  return keys;
};

const shuffleArray = <T>(array: T[]): T[] => {
  const arr = [...array];
  for (let i = arr.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [arr[i], arr[j]] = [arr[j], arr[i]];
  }
  return arr;
};

// --- –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ Gemini ---
async function processGeminiTask(taskId: string, prompt: string) {
    const task = tasks.get(taskId);
    if (!task) return;

    const apiKeys = shuffleArray(getApiKeys());
    if (apiKeys.length === 0) {
        tasks.set(taskId, { ...task, status: 'error', error: '–ö–ª—é—á–∏ API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ' });
        return;
    }

    let lastError: any = null;
    let handled = false;

    for (const apiKey of apiKeys) {
        try {
            const shortKey = apiKey.slice(-6);
            console.log(`${colors.blue}ü§ñ –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∏–º–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ ${taskId} —Å –∫–ª—é—á–æ–º ...${shortKey}${colors.reset}`);
            
            const ai = new GoogleGenAI({ apiKey });
            const streamResponse = await ai.models.generateContentStream({
                model: 'gemini-2.5-flash',
                contents: prompt,
            });

            for await (const chunk of streamResponse) {
                const text = chunk.text;
                if (text) {
                    const currentTask = tasks.get(taskId);
                    if (currentTask) {
                        currentTask.resultText += text;
                    }
                }
            }
            
            const finalTask = tasks.get(taskId);
            if(finalTask) {
                finalTask.status = 'done';
            }
            console.log(`${colors.green}‚úÖ –°—Ç—Ä–∏–º –¥–ª—è –∑–∞–¥–∞—á–∏ ${taskId} (–∫–ª—é—á ...${shortKey}) –∑–∞–≤–µ—Ä—à–µ–Ω.${colors.reset}`);
            handled = true;
            break; 

        } catch (err: any) {
            lastError = err;
            const msg = (err.message || '').toLowerCase();
            const shortKey = apiKey.slice(-6);

            if (msg.includes('429') || msg.includes('quota') || msg.includes('too many requests')) {
                console.warn(`${colors.yellow}‚õî –ö–ª—é—á ...${shortKey} –¥–ª—è –∑–∞–¥–∞—á–∏ ${taskId} –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç.${colors.reset}`);
                continue;
            }
            
            console.error(`${colors.red}‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ ${taskId} (–∫–ª—é—á ...${shortKey}):${colors.reset} ${err.message}`);
            break; 
        }
    }

    if (!handled) {
        const finalTask = tasks.get(taskId);
        if(finalTask) {
            finalTask.status = 'error';
            finalTask.error = lastError?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Gemini API –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.';
        }
        console.error(`${colors.red}${colors.bold}üí• –í—Å–µ –∫–ª—é—á–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ ${taskId} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏.${colors.reset}`);
    }
}

// --- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ API ---
export default async function handler(req: VercelRequest, res: VercelResponse) {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

  if (req.method === 'OPTIONS') return res.status(204).end();

  // POST: –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
  if (req.method === 'POST') {
    const { prompt } = req.body;
    if (!prompt) return res.status(400).json({ error: '–í —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ "prompt"' });

    const taskId = nanoid(12);
    const newTask: AiTask = {
      id: taskId,
      status: 'pending',
      resultText: '',
      createdAt: Date.now(),
    };
    tasks.set(taskId, newTask);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ, –ù–ï –æ–∂–∏–¥–∞—è –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    processGeminiTask(taskId, prompt);

    console.log(`${colors.cyan}‚ú® –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ Gemini —Å–æ–∑–¥–∞–Ω–∞:${colors.reset} ${taskId}`);
    return res.status(202).json({ taskId });
  }

  // GET: –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
  if (req.method === 'GET') {
    const { taskId } = req.query;
    if (!taskId || typeof taskId !== 'string') return res.status(400).json({ error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä "taskId"' });

    const task = tasks.get(taskId);
    if (!task) return res.status(404).json({ error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });

    return res.status(200).json({
      status: task.status,
      resultText: task.resultText,
      error: task.error,
    });
  }

  return res.status(405).json({ error: '–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω' });
}


// --- –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á ---
setInterval(() => {
    const now = Date.now();
    const tenMinutes = 10 * 60 * 1000;
    for (const [key, task] of tasks.entries()) {
        if (now - task.createdAt > tenMinutes) {
            tasks.delete(key);
            console.log(`${colors.gray}üóëÔ∏è –û—á–∏—â–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∑–∞–¥–∞—á–∞ Gemini:${colors.reset} ${key}`);
        }
    }
}, 60 * 1000);
