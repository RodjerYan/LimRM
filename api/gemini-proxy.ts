import { GoogleGenAI } from '@google/genai';
import type { VercelRequest, VercelResponse } from '@vercel/node';

// üé® –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: "\x1b[0m",
  gray: "\x1b[90m",
  red: "\x1b[31m",
  green: "\x1b[32m",
  yellow: "\x1b[33m",
  blue: "\x1b[34m",
  magenta: "\x1b[35m",
  cyan: "\x1b[36m",
  bold: "\x1b[1m"
};

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π API ---
const getApiKeys = (): string[] => {
  const keys: string[] = [];
  if (process.env.API_KEY) keys.push(process.env.API_KEY);
  let i = 2;
  while (process.env[`API_KEY_${i}`]) {
    keys.push(process.env[`API_KEY_${i}`]!);
    i++;
  }
  return keys;
};

// --- –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ (–§–∏—à–µ—Ä-–ô–µ–π—Ç—Å) ---
const shuffleArray = <T>(array: T[]): T[] => {
  const arr = [...array];
  for (let i = arr.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [arr[i], arr[j]] = [arr[j], arr[i]];
  }
  return arr;
};

// --- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ---
export default async function handler(req: VercelRequest, res: VercelResponse) {
  // --- –ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ CORS –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ ---
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

  if (req.method === 'OPTIONS') {
    res.status(204).end();
    return;
  }

  if (req.method !== 'POST') {
    res.status(405).json({ error: '–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω' });
    return;
  }

  const { contents, config } = req.body;
  if (!contents) {
    res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω–æ –ø–æ–ª–µ "contents" –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞' });
    return;
  }

  const apiKeys = shuffleArray(getApiKeys());
  if (apiKeys.length === 0) {
    res.status(500).json({ error: '–ö–ª—é—á–∏ API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã' });
    return;
  }

  console.log(`${colors.cyan}${colors.bold}üß† –ù–∞–π–¥–µ–Ω–æ ${apiKeys.length} –∫–ª—é—á(–µ–π) Gemini. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...${colors.reset}`);
  const startTime = Date.now();

  let lastError: any = null;
  let handled = false;
  let attempts = 0;

  for (const apiKey of apiKeys) {
    attempts++;
    const shortKey = apiKey.slice(-6);
    console.log(`${colors.blue}üöÄ –ü–æ–ø—ã—Ç–∫–∞ #${attempts}${colors.reset} ‚Äî ${colors.gray}–∫–ª—é—á ...${shortKey}${colors.reset}`);

    try {
      const ai = new GoogleGenAI({ 
        apiKey
      });
      const isJsonRequest = config?.responseMimeType === 'application/json';

      // –î–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ Vercel, –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini, –∏–∑–±–µ–≥–∞—è –ø—Ä—è–º–æ–≥–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –∫–ª–∏–µ–Ω—Ç—É.
      const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash',
        contents,
        config,
      });

      const text = response.text?.trim();
      if (!text) throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏');
      
      const duration = Date.now() - startTime;

      if (isJsonRequest) {
        try {
          const json = JSON.parse(text);
          console.log(`${colors.green}‚úÖ –ö–ª—é—á ...${shortKey}${colors.reset} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª JSON-–∑–∞–ø—Ä–æ—Å –∑–∞ ${duration} –º—Å`);
          res.status(200).json(json);
        } catch (e) {
          console.error(`${colors.red}‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –ø—Ä–∏ –∫–ª—é—á–µ ...${shortKey}:${colors.reset}`, e);
          res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON', raw: text });
        }
      } else {
        // –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç. –ö–ª–∏–µ–Ω—Ç —Å–∏–º—É–ª–∏—Ä—É–µ—Ç —Å—Ç—Ä–∏–º.
        console.log(`${colors.green}‚úÖ –ö–ª—é—á ...${shortKey}${colors.reset} –≤—ã–ø–æ–ª–Ω–∏–ª —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∑–∞ ${duration} –º—Å`);
        res.setHeader('Content-Type', 'text/plain; charset=utf-8');
        res.status(200).send(text);
      }
      
      handled = true;
      break;

    } catch (err: any) {
      lastError = err;
      const msg = (err.message || '').toLowerCase();

      if (
        msg.includes('429') ||
        msg.includes('resource_exhausted') ||
        msg.includes('quota') ||
        msg.includes('too many requests')
      ) {
         console.warn(`${colors.yellow}‚õî –ö–ª—é—á ...${shortKey} –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç (–æ—à–∏–±–∫–∞ –∫–≤–æ—Ç—ã). –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π.${colors.reset}`);
         continue;
      }
      
      if (
        msg.includes('failed to fetch') ||
        msg.includes('connection')
      ) {
        console.warn(`${colors.yellow}üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ —Å –∫–ª—é—á–æ–º ...${shortKey}. –ü—Ä–æ–±—É—é —Å–ª–µ–¥—É—é—â–∏–π. (–î–µ—Ç–∞–ª–∏: ${err.message})${colors.reset}`);
        continue;
      }

      console.error(`${colors.red}‚ùå –ù–µ–ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª—é—á–µ ...${shortKey}:${colors.reset} ${err.message}`);
      break;
    }
  }

  if (!handled && !res.headersSent) {
    console.error(`${colors.red}${colors.bold}üí• –í—Å–µ –∫–ª—é—á–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞:${colors.reset}`, lastError?.message);
    res.status(500).json({
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Gemini API',
      details: lastError?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.',
    });
  }

  if (handled) {
    const totalTime = Date.now() - startTime;
    console.log(`${colors.magenta}‚è±Ô∏è –í—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: ${totalTime} –º—Å (${attempts} –ø–æ–ø—ã—Ç–æ–∫).${colors.reset}`);
  }
}