// utils/addressMappings.ts

// This file contains the core data and logic for identifying and standardizing region names.

/**
 * A comprehensive mapping of various region name formats (keywords, abbreviations, common misspellings)
 * to the single, official, standardized region name. This is the heart of Priority 1 parsing.
 * Keys are all lowercase for case-insensitive matching.
 */
export const REGION_KEYWORD_MAP: Record<string, string> = {
  // --- Russian Federation (89 Subjects) ---
  // Republics (24)
  'адыгея': 'Республика Адыгея',
  'респ алтай': 'Республика Алтай',
  'башкортостан': 'Республика Башкортостан', 'башкирия': 'Республика Башкортостан',
  'бурятия': 'Республика Бурятия',
  'дагестан': 'Республика Дагестан',
  'ингушетия': 'Республика Ингушетия',
  'кбр': 'Кабардино- Балкарская Республика', 'кабардино-балкария': 'Кабардино- Балкарская Республика',
  'калмыкия': 'Республика Калмыкия',
  'кчр': 'Карачаево-Черкесская Республика', 'карачаево-черкесия': 'Карачаево-Черкесская Республика',
  'карелия': 'Республика Карелия',
  'коми': 'Республика Коми',
  'крым': 'Республика Крым',
  'марий эл': 'Республика Марий Эл',
  'мордовия': 'Республика Мордовия',
  'саха': 'Республика Саха (Якутия)', 'якутия': 'Республика Саха (Якутия)',
  'северная осетия': 'Республика Северная Осетия — Алания', 'алания': 'Республика Северная Осетия — Алания',
  'татарстан': 'Республика Татарстан',
  'тыва': 'Республика Тыва', 'тува': 'Республика Тыва',
  'удмуртия': 'Удмуртская Республика',
  'хакасия': 'Республика Хакасия',
  'чечня': 'Чеченская Республика', 'чеченская': 'Чеченская Республика',
  'чувашия': 'Чувашская Республика', 'чувашская': 'Чувашская Республика',
  'днр': 'Донецкая Народная Республика', 'донецкая народная республика': 'Донецкая Народная Республика',
  'лнр': 'Луганская Народная Республика', 'луганская народная республика': 'Луганская Народная Республика',
  
  // Krais (9)
  'алтайский край': 'Алтайский край',
  'забайкальский край': 'Забайкальский край',
  'камчатский край': 'Камчатский край',
  'краснодарский край': 'Краснодарский край', 'кубань': 'Краснодарский край',
  'красноярский край': 'Красноярский край',
  'пермский край': 'Пермский край',
  'приморский край': 'Приморский край',
  'ставропольский край': 'Ставропольский край',
  'хабаровский край': 'Хабаровский край',

  // Oblasts (48)
  'амурская': 'Амурская область',
  'архангельская': 'Архангельская область',
  'астраханская': 'Астраханская область',
  'белгородская': 'Белгородская область',
  'брянская': 'Брянская область',
  'владимирская': 'Владимирская область',
  'волгоградская': 'Волгоградская область',
  'вологодская': 'Вологодская область',
  'воронежская': 'Воронежская область',
  'ивановская': 'Ивановская область',
  'иркутская': 'Иркутская область',
  'калининградская': 'Калининградская область',
  'калужская': 'Калужская область',
  'кемеровская': 'Кемеровская область', 'кузбасс': 'Кемеровская область',
  'кировская': 'Кировская область',
  'костромская': 'Костромская область',
  'курганская': 'Курганская область',
  'курская': 'Курская область',
  'ленинградская': 'Ленинградская область', 'ленобласть': 'Ленинградская область',
  'липецкая': 'Липецкая область',
  'магаданская': 'Магаданская область',
  'московская': 'Московская область', 'мособласть': 'Московская область', 'подмосковье': 'Московская область',
  'мурманская': 'Мурманская область',
  'нижегородская': 'Нижегородская область',
  'новгородская': 'Новгородская область',
  'новосибирская': 'Новосибирская область',
  'омская': 'Омская область',
  'оренбургская': 'Оренбургская область',
  'орловская': 'Орловская область', 'орловская обл': 'Орловская область', 'обл орловская': 'Орловская область',
  'пензенская': 'Пензенская область',
  'псковская': 'Псковская область',
  'ростовская': 'Ростовская область',
  'рязанская': 'Рязанская область',
  'самарская': 'Самарская область',
  'саратовская': 'Саратовская область',
  'сахалинская': 'Сахалинская область',
  'свердловская': 'Свердловская область',
  'смоленская': 'Смоленская область',
  'тамбовская': 'Тамбовская область',
  'тверская': 'Тверская область',
  'томская': 'Томская область',
  'тульская': 'Тульская область',
  'тюменская': 'Тюменская область',
  'ульяновская': 'Ульяновская область',
  'челябинская': 'Челябинская область',
  'ярославская': 'Ярославская область',
  'запорожская': 'Запорожская область', 'запорожская обл': 'Запорожская область',
  'херсонская': 'Херсонская область', 'херсонская обл': 'Херсонская область',

  // Federal Cities (3)
  'москва': 'Москва',
  'санкт-петербург': 'Санкт-Петербург', 'спб': 'Санкт-Петербург',
  'севастополь': 'Севастополь',

  // Autonomous Okrugs (4)
  'ненецкий ао': 'Ненецкий автономный округ',
  'хмао': 'Ханты-Мансийский автономный округ - Югра', 'югра': 'Ханты-Мансийский автономный округ - Югра',
  'чукотский ао': 'Чукотский автономный округ', 'чукотка': 'Чукотский автономный округ',
  'янао': 'Ямало-Ненецкий автономный округ', 'ямал': 'Ямало-Ненецкий автономный округ',

  // Autonomous Oblast (1)
  'еврейская ао': 'Еврейская автономная область',
  
  // --- CIS Countries ---
  'азербайджан': 'Азербайджан',
  'армения': 'Армения',
  'беларусь': 'Республика Беларусь', 'белоруссия': 'Республика Беларусь',
  'казахстан': 'Республика Казахстан',
  'киргизия': 'Кыргызская Республика', 'кыргызстан': 'Кыргызская Республика',
  'молдова': 'Республика Молдова', 'молдавия': 'Республика Молдова',
  'таджикистан': 'Республика Таджикистан',
  'туркменистан': 'Туркменистан',
  'узбекистан': 'Республика Узбекистан',
  'украина': 'Украина',

  // --- Unrecognized & Partially Recognized States ---
  'абхазия': 'Республика Абхазия',
  'южная осетия': 'Республика Южная Осетия',
  'приднестровье': 'Приднестровская Молдавская Республика', 'пмр': 'Приднестровская Молдавская Республика',
  'нагорный карабах': 'Нагорно-Карабахская Республика', 'арцах': 'Нагорно-Карабахская Республика',
  'северный кипр': 'Турецкая Республика Северного Кипра',
  'косово': 'Республика Косово',
};


/**
 * Mapping of postal indexes (full or prefixed) to their corresponding region.
 * Used as a Priority 3 fallback for address parsing.
 */
export const INDEX_MAP: Record<string, string> = {
    // Specific codes from user prompt
    '32038': 'Орловская область',
    '249440': 'Калужская область',
    '249406': 'Калужская область',

    // Central Federal District
    '241': 'Брянская область', '242': 'Брянская область', '243': 'Брянская область',
    '302': 'Орловская область', '303': 'Орловская область',
    '214': 'Смоленская область', '215': 'Смоленская область', '216': 'Смоленская область',
    '305': 'Курская область',
    '308': 'Белгородская область',
    '394': 'Воронежская область',
    '10': 'Москва', '11': 'Москва', '12': 'Москва',
    '14': 'Московская область',
    // New Regions
    '28': 'Херсонская область', // Generally, 28xxxx is Amur, but new codes are assigned. This is a placeholder.
    '29': 'Республика Крым', // Generally Arkhangelsk
    '83': 'Донецкая Народная Республика', // Custom prefix
    '84': 'Донецкая Народная Республика', // Custom prefix
    '91': 'Луганская Народная Республика', // Custom prefix
    '92': 'Луганская Народная Республика', // Custom prefix
    // CIS Countries (example prefixes)
    '220': 'Республика Беларусь', // Minsk
    '010': 'Республика Казахстан', // Astana
};


/**
 * Standardizes a given region string by looking it up in the comprehensive keyword map.
 * This is the single source of truth for region name normalization throughout the app.
 * @param input The raw region string.
 * @returns The standardized, official region name or the original input if no match is found.
 */
export const standardizeRegion = (input: string | null | undefined): string => {
    if (!input) return '';
    const lowerInput = input.toLowerCase().trim();
    // Direct match check first
    if (REGION_KEYWORD_MAP[lowerInput]) {
        return REGION_KEYWORD_MAP[lowerInput];
    }
    // Check if the input contains any of the keys
    for (const key in REGION_KEYWORD_MAP) {
        if (lowerInput.includes(key)) {
            return REGION_KEYWORD_MAP[key];
        }
    }
    // Return the original formatted nicely if no match
    return input.trim();
};