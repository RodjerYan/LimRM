// utils/addressMappings.ts
// Ключи – первые 2 цифры индекса (по официальному справочнику Почты РФ 2025)
export const postalToRegion: Record<string, string> = {
  // ---------- 85 субъектов ----------
  '10': 'Москва',
  '11': 'Москва',
  '12': 'Москва',
  '13': 'Москва',
  '14': 'Московская область',
  '15': 'Ярославская область',
  '16': 'Республика Коми',
  '17': 'Костромская область',
  '18': 'Вологодская область',
  '19': 'Санкт-Петербург',
  '20': 'Тверская область',
  '21': 'Смоленская область',
  '22': 'Псковская область',
  '23': 'Новгородская область',
  '24': 'Брянская область',       // CORRECTED: 24 is Bryansk
  '25': 'Калининградская область',
  '26': 'Ленинградская область',
  '27': 'Архангельская область',
  '28': 'Вологодская область',
  '29': 'Ненецкий автономный округ',
  '30': 'Орловская область',
  '31': 'Белгородская область',
  '32': 'Орловская область',     // FIX: 32 must be Oryol based on user data '32038'
  '33': 'Владимирская область',
  '34': 'Волгоградская область',
  '35': 'Краснодарский край',
  '36': 'Ростовская область',
  '37': 'Ставропольский край',
  '38': 'Астраханская область',
  '39': 'Воронежская область',
  '40': 'Воронежская область',
  '41': 'Липецкая область',
  '42': 'Республика Татарстан',
  '43': 'Рязанская область',
  '44': 'Тульская область',
  '45': 'Республика Башкортостан',
  '46': 'Оренбургская область',
  '47': 'Самарская область',
  '48': 'Ульяновская область',
  '49': 'Пензенская область',
  '50': 'Саратовская область',
  '51': 'Нижегородская область',
  '52': 'Кировская область',
  '53': 'Пермский край',
  '54': 'Свердловская область',
  '55': 'Челябинская область',
  '56': 'Курганская область',
  '57': 'Тюменская область',
  '58': 'Ханты-Мансийский автономный округ – Югра',
  '59': 'Ямало-Ненецкий автономный округ',
  '60': 'Новосибирская область',
  '61': 'Омская область',
  '62': 'Тюменская область',
  '63': 'Новосибирская область',
  '64': 'Омская область',
  '65': 'Республика Алтай',
  '66': 'Красноярский край',
  '67': 'Иркутская область',
  '68': 'Республика Бурятия',
  '69': 'Забайкальский край',
  '70': 'Хабаровский край',
  '71': 'Приморский край',
  '72': 'Сахалинская область',
  '73': 'Магаданская область',
  '74': 'Камчатский край',
  '75': 'Чукотский автономный округ',
  '76': 'Еврейская автономная область',
  '77': 'Республика Саха (Якутия)',
  '78': 'Республика Тыва',
  '79': 'Республика Хакасия',
  '80': 'Республика Дагестан',
  '81': 'Республика Ингушетия',
  '82': 'Кабардино-Балкарская Республика',
  '83': 'Карачаево-Черкесская Республика',
  '84': 'Республика Северная Осетия – Алания',
  '85': 'Чеченская Республика',
  '86': 'Республика Адыгея',
  '87': 'Республика Крым',
  '88': 'Севастополь',
  '89': 'Республика Марий Эл',
  '90': 'Республика Мордовия',
  '91': 'Чувашская Республика',
  '92': 'Удмуртская Республика',
  '93': 'Республика Татарстан',
  '94': 'Республика Коми',
  '95': 'Республика Карелия',
  '96': 'Республика Калмыкия',
  '97': 'Республика Бурятия',
  '98': 'Республика Саха (Якутия)',
  '99': 'Республика Тыва'
};

export const cityToRegion: Record<string, string> = {
  // Города из ваших примеров (lowercase)
  'брянск': 'Брянская область',
  'орёл': 'Орловская область',
  'орел': 'Орловская область',
  'ливны': 'Орловская область',
  'смоленск': 'Смоленская область',
};

export const normalizeRegion = (region: string): string => {
    if (!region) return '';
    let normalized = region.trim();
    
    // Standardize common abbreviations to full words
    normalized = normalized.replace(/\bобл\.?/gi, 'область')
                         .replace(/\bресп\.?/gi, 'Республика')
                         .replace(/\bр-н\b/gi, 'район');

    // Capitalize the first letter of each word, except for 'Республика'
    return normalized.split(' ')
        .map((word, index) => {
            if (word.toLowerCase() === 'республика') return 'Республика';
            return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
        })
        .join(' ');
};

export function getRegionByPostal(postal: string): string | undefined {
  const clean = postal.replace(/\D/g, '');
  if (clean.length >= 2) {
    const key = clean.slice(0, 2);
    return postalToRegion[key];
  }
  return undefined;
}

export function getRegionByCity(city: string): string | undefined {
  const normalizedCity = city.toLowerCase().trim().replace('ё', 'е');
  return cityToRegion[normalizedCity];
}
